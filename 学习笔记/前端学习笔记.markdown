#前端学习笔记
1. **class用. ； ID 用#，在jQuery和sublime操作也一样**;
2. **从第一层到第五层依次为：**` border、content+padding、background-image、background-color、margin`;
3. **position=位置 absolute绝对 relative：相对**.absolute使用要设置父元素为relative;
4. **padding:** 1px 20px 37px 30px 分别为上、右、下、左;
5. **cssgaga雪碧图**：以后要学习具体怎么用，12-22整理的时候还没具体学习;
6. **引用外部样式表：**`<link rel="stylesheet" type="text/css" href="css/style.css">` ;
7. **删除指定属性:**	document.removeAttribute('style');
8. **javasecript打开新的页面**   `window.open('http://www.imooc.com','_blank','width=600 height=400,top=100,left=110')`
9. **注意height和width的拼写，以及他们中间没符号，还有其他单词的拼写，好多bug都是自己，单词打错了顺序，切记！**
10.	**调用函数一定后面要带（），之前调试的时候没括号就不行，随后看其他老师的教程，都没有带，也可以，随后要具体分析下;**
11.	**双引号里面要用单引号,或者单引号内用双引号;**`"<a href='javascript:;' onclick='del(this)' >删除</a>";`
13.	**太难了，留着以后做:**,[javascript切换多标签栏][1];
13. 通用重置样式表	`reset.css`重置浏览器默认样式显示
14. 要学会JSON多个数据使用
15. bootstrap里面， `<dl class="dl-horizontal"> </dl>` 该类设置了浮动和偏移，应用于 `<dl>` 元素和 `<dt>` 元素中
16.	`table 表格 tr:行；th:表头；td:单元内容`。
17.	**多个class需要用空格隔开就好了，学习bootstrap知道的:** class="table table-bordered table-hover"
18.	**sublime记不住，但是有用的快捷键**
> Ctrl+X：删除当前行
alt+shift+w 使用标签包裹一行; 开始输入你想使用的标签
ctrl+shift+y计算数学表达式
> 	ctrl+shift+d复制行 	ctrl+[ 或 ]缩进
19.	**normalize和reset都是重置样式的:**[详解normalize][2]：
20.	有时在分号上来，切记，不要用中文分号，随后在sublime中用来语法检查轻松避免了这个错误。
21.	 `$("#frmTest :input").addClass("bg_blue");`注意空格
22.	 在js中变量不需要加引号
23.	 注意核对引入的jqery或者其他模块的适用版本，不然又是个潜在的bug！
24.	 绑定元素的多个事件时,只需将事件用空格符隔开
25.	 `$(selector).each(function(index))`遍历内容
26.	 **jQuery实现动画**,
	 <pre> $(function () {
                $("span").animate({
                    width: "80px",
                    height: "80px"
                },
                3000, function () {
                    $("#tip").html("执行完成!");
                });
            });</pre>
27.  **width    height，切记，一个末尾时th，一个是ht，相反的**

28. **数据类型判断:**
>	typeof 100           "number"
	typeof true          "boolean"
	typeof function      "function"
	typeof (undefined)   "undefined"
	typeof new Object()  "object"
	typeof [1,2]         "object"
	typeof null          "object"
	typeof NaN           "number"

29. **[看不懂。this的介绍][3]**
30. **切记字母顺序不要错，好多时候出错都是字母顺序。**

31. jQuery 属性选择器 XPath
<pre>
jQuery 使用 XPath 表达式来选择带有给定属性的元素。
	$("[href]") 选取所有带有 href 属性的元素。
	$("[href='#']") 选取所有带有 href 值等于 "#" 的元素。
	$("[href!='#']") 选取所有带有 href 值不等于 "#" 的元素。
	$("[href$='.jpg']") 选取所有 href 值以 ".jpg" 结尾的元素

32. **背景图不重复:**`background: #00FF00 url(bgimage.gif) no-repeat fixed top;  no-repeat`;
33. 在《新手引导这里》，由于图省事，遇上了给自己造的最大的bug，demo里面用的是stepA属性，而我一开始排版图省事儿，用的step1，写css的时候忘记了，按照来，结果找了一个小时的bug。
34. 又遇到个神级bug，`<a href=></a>`,如果用a标签绑定click事件，千万不要带href，不然每点击一次触发一次刷新。可以用`href=javacript:;`阻止浏览器的默认行为。
35. 绑定点击事件`aStep[i].onclick=function(){}` 。
36. `document.cookie="name=www.open.com.cn;expires="+oDate`;设置cookie，时间为oDate；
37. `var aAs=$("#main a")`;使用jQuery，获取id=main标签的里a标签
38. `$("a").click(function(){})`  为每个a绑定click事件。
39. `var currentStep=$(this).parent()`; 获取当前点击的a标签的父元素
40. `var oDate=new Date();`
    `oDate.setDate(oDate.getDate()+30);`
	`document.cookie="name=www.open.com.cn;expires="+oDate;`
	设置cookie name=www.open.com.cn，有效期一个月
41. `div.offsetWidth`获取元素的宽度；`offsetHeight  offsetTop offsetLeft`
42. 获取滚动条Top值，同时取标准模式和混杂模式两种可能
	`var scrollTop=document.body.scrollTop||document.documentElement.scrollTop`
43. `var head= document.getElementById("head");`
`head.style.cssText="width:200px;height:70px;display:bolck";` 用javascript给head设置宽高
44. 使用for遍历，需要return结果的话，要在for语句之外return;
45. 书写height和width，长点心吧，别在打反了;
46. **./ 当前目录
	../ 父级目录
	/ 根目录**
47. `#main>div` jQuery中，获取main下面一层的div
48. `#main div` 获取main下面所有的div
49. `$("#main>div").last().get(0)`
 last()获取最后一个元素作为对象，get(0)变为dom元素
50. `offsetHeight`获取的是当前元素的高度
	`height()`获取的是不包括`padding`值的，比`offsetHeight`小
51. `$.inArray(min,Harr)` 获取Harr中min的索引位置。
52. `position()` 方法返回匹配元素相对于父元素的位置（偏移）。
	该方法返回的对象包含两个整型属性：top 和 left，以像素计。
53. jQuery焦点图 `move.js`;
54. `onselectstart="return false"`
55. `(function(){})();`立即执行函数
56. fullpage 全屏滚动
57. koala中文乱码<br>`D:\Koala\rubygems\gems\sass-3.4.9\lib\sass`<br>修改 engine.rb 文件 <br>`Encoding.default_external = Encoding.find('utf-8')`，在win10下要先在外面修改替换，和修改hosts一样
56. 函数{
		`function add(a,b){}`   函数声明
		`var add=function(a,b){}` 函数表达式
		`var func=function add(){}` 命名函数表达式，不常见
		`var func=new Function('a','b','console.log(a+b);');` 构造器生成函数
		}
		函数声明会被前置。可以在声明之前调用；
		函数表达式，在表达式前面不可调用。但是里面的变量声明add会提前。
		[详细讲解][4]
57. 使用**switch**语句的时候，**记得case结束用break**，还有最后一句如果还有其他不一样的结果，记得用`defaul:break`
58. 如果找不到bug，例如浏览器差异的bug，有可能是browsersync引起的。
	ps:这次还真不是browsersync，原来是火狐上装的**adblock Plus**这个插件引起的，刚好一个div的class前缀以ad-开头就被杀了。
60. `<hr/>`设置颜色，用`bored-bottom：1px solid red；`
61. `<img src="#" alt=" " title=" ">`  alt表示图片不能载入显示的内容。title是鼠标滑过显示的内容。
62. `box-sizing`解决内边距和边框造成的实际宽度比设置的宽度大的问题
      -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
空数组（[]）和空对象（{}）对应的布尔值，都是true。
将数组清空的一个有效方法，就是将length属性设为0。

闭包。装对象的私有属性和私有方法 http://javascript.ruanyifeng.com/grammar/function.html#toc15
function Person(name) {
  var _age;
  function setAge(n) {
    _age = n;
  }
  function getAge() {
    return _age;
  }

  return {
    name: name,
    getAge: getAge,
    setAge: setAge
  };
}

var p1 = person('张三');
p1.setAge(25);
p1.getAge() // 25

如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与Boolean函数的作用相同。!!x

// 等同于

Boolean(x)

这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代if结构，比如下面是一段if结构的代码，就可以用且运算符改写。
if (i !== 0 ){
    doSomething();
}

// 等价于

i && doSomething();

一般情况下，几乎总是使用Object.keys方法，遍历数组的属性。Object.getOwnPropertyNames同时获取不可枚举的属性

new Date()
可以看到月份从0开始计算，因此1月是0，12月是11。但是，月份里面的天数从1开始计算。

正则表达式

    ^ 表示字符串的开始位置
    $ 表示字符串的结束位置


window.performance.now()。它提供页面加载到命令运行时的已经过去的时间


Boolean(undefined) // false
Boolean(null) // false
Boolean(0) // false
Boolean('') // false
Boolean(NaN) // false
Boolean(1) // true
Boolean('false') // true
Boolean([]) // true
Boolean({}) // true
Boolean(function(){}) // true
Boolean(/foo/) // true
或者
!!undefined // false
!!null // false
!!0 // false
!!'' // false
!!NaN // false
!!1 // true
!!'false' // true
!![] // true
!!{} // true
!!function(){} // true
!!/foo/ // true

对象的get set方法，没有空格
var o = {
  get p() {
    return "getter";
  },
  set p(value) {
    console.log("setter: "+value);
  }
}

构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作上下文对象（即this对象），将其“构造”为需要的样子。如果构造函数的return语句返回的是对象，new命令会返回return语句指定的对象；否则，就会不管return语句，返回构造后的上下文对象。

var Vehicle = function (){
  this.price = 1000;
  return 1000;
};

(new Vehicle()) === 1000
// false
但是，如果return语句返回的是一个跟this无关的新对象，new命令会返回这个新对象，而不是this对象。这一点需要特别引起注意。
var Vehicle = function (){
  this.price = 1000;
  return { price: 2000 };
};

(new Vehicle()).price
// 2000


对象的继承
function Person(){}
function Student(){}
实现student继承person的方法
Student.prototype=Object.create(Person.prototype)
ES5以下不支持creat的，可以用一下方法
if(!Object.creat){
    Object.creat=function(proto){
        function F(){};
        F.prototype=proto;
        return new F();
    };
}

使用typeof检测变量是否定义
typeof foo !== 'undefined'

转换字符串
''+10 === '10';
转换为数字
+'10' === 10;
转换为布尔型
!!'foo';   // true
!!'';      // false
!!'0';     // true
!!'1';     // true
!!'-1'     // true
!!{};      // true
!!true;    // true

正则表达式
/[^#].*/.exec('#hahaha')[0]   //"hahaha"
[^#]除了#匹配后面

分割字符串
"get-element-by-id".split("-")
["get", "element", "by", "id"]

jQuery中
$("div")[0] === $("div").get(0),不过返回的是DOM对象.
如果要获取jQuery对象.使用 $("div").eq(0)























  [1]: http://www.imooc.com/code/1912
  [2]: http://jerryzou.com/posts/aboutNormalizeCss/
  [3]: http://www.imooc.com/video/6431
  [4]: http://www.imooc.com/video/6429